// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  username        String
  email           String   @unique
  password        String
  profilePicture  String?
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  notes                   Note[]
  accounts                Account[]
  refreshTokens           RefreshToken[]
  emailVerificationTokens EmailVerificationToken[]

  videoIds String[] @db.ObjectId
  videos   Video[]  @relation(fields: [videoIds], references: [id])
}

enum AccountType {
  oauth
  email
}

enum Providers {
  google
  credentials
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @unique @db.ObjectId
  providerAccountId String   @unique // The account ID from the provider
  // refreshToken      String? // OAuth refresh token
  // accessToken       String? // OAuth access token
  // expiresAt         Int? // OAuth token expiry date
  // tokenType         String? // OAuth token type
  // scope             String? // OAuth scopes
  // idToken           String? // OAuth ID token
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  type     AccountType // 'oauth', 'email', etc.
  provider Providers // 'google', 'github', 'credentials', etc.

  // Relation to user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Unique constraint for one account per provider per user
  @@unique([provider, providerAccountId])
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model Note {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  timestamp  Float
  videoTitle String
  thumbnail  String
  youtubeId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  videoId    String   @db.ObjectId

  video Video @relation(fields: [videoId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model Video {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  youtubeId       String   @unique
  title           String
  description     String
  channelTitle    String
  embedHtmlPlayer String
  tags            String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  thumbnails Thumbnails
  notes      Note[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

type Thumbnails {
  default  ThumbnailSize
  medium   ThumbnailSize
  high     ThumbnailSize
  standard ThumbnailSize
  maxres   ThumbnailSize
}

type ThumbnailSize {
  url    String
  width  Int
  height Int
}
